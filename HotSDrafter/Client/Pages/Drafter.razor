@page "/Drafter"
@using HotSDrafter.Shared
@using System.Threading
@inject HttpClient Http

<h3>Drafter</h3>

@if (Heroes.Length == 0 && Maps.Length == 0)
{
    <h1>Loading</h1>
}
else
{
    <div>
        <select name="rank" @bind="@Rank">
            <option value="@Rank.None">Select a Rank</option>
            <option value="@Rank.Bronze">Bronze</option>
            <option value="@Rank.Silver">Silver</option>
            <option value="@Rank.Gold">Gold</option>
            <option value="@Rank.Platinum">Platinum</option>
            <option value="@Rank.Diamond">Diamond</option>
            <option value="@Rank.Master">Master</option>
        </select>
        
        <select name="map" @bind="@Map">
            <option value="">Select a Map</option>
            @foreach (Map map in Maps)
            {
                <option value="@map.Name">@map.Name</option>
            }
        </select>
        
    </div>

    <div>
        <select name="hero" @bind="@HeroToPick">
            <option value="">Select a Hero</option>
            @foreach (Hero hero in AvailableHeroes)
            {
                <option value="@hero.Name">@hero.Name</option>
            }
        </select>

        @if (Bans.Any(i => i == null))
        {
            <button @onclick="BanHero" class="btn btn-warning">Ban</button>
        }
        @if (Teams[0].Any(i => i == null))
        {
            <button @onclick="() => PickHero(0)" class="btn btn-primary">Pick</button>
        }
        @if (Teams[1].Any(i => i == null))
        {
            <button @onclick="() => PickHero(1)" class="btn btn-danger">Ennemy</button>
        }
    </div>
    <div>
        
    </div>

    <table>
        <thead>
        <tr>
            @foreach (Hero ban in Bans)
            {
                string img = (ban != null ? ban.ImageUrl : "");
                <th class="ban-cell"><img src="@img" /></th>
            }
        </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < 5; ++i)
        {
            string img1 = (Teams[0][i] != null ? Teams[0][i].ImageUrl : "");
            string img2 = (Teams[1][i] != null ? Teams[1][i].ImageUrl : "");

            string name1 = (Teams[0][i] != null ? Teams[0][i].Name : "");
            string name2 = (Teams[1][i] != null ? Teams[1][i].Name : "");

            <tr>
                <td colspan="3" class="ally"><img @onclick="() => UpdateMatchups(name1, 1)" src="@img1"/></td>
                <td colspan="3" class="ennemy"><img @onclick="() => UpdateMatchups(name2, 0)"src="@img2" /></td>
            </tr>
        }
        </tbody>
    </table>

    if (Advice != null)
    {
<div style="display: flex">
    <div style="margin-right: 200px;">
        <h2>Bests picks for the map</h2>
        <table>
            @foreach (HeroWinrate result in Advice.MapPicks)
            {
                <tr>
                    <td><img @onclick="() => UpdateMatchups(result.Hero.Name, 1)" src="@result.Hero.ImageUrl"></td>
                    <td>@result.WinRate %</td>
                </tr>
            }
        </table>
    </div>

    <div style="margin-right: 200px;">
        <h2>Bests counters</h2>
        <table>
            @foreach (HeroWinrate result in Advice.Counters)
            {
                <tr>
                    <td><img @onclick="() => UpdateMatchups(result.Hero.Name, 1)" src="@result.Hero.ImageUrl"></td>
                    <td>@result.WinRate %</td>
                </tr>
            }
        </table>
    </div>

    <div>
        <h2>Matchups</h2>
        <table>
            @foreach (HeroWinrate result in Matchups)
            {
                <tr>
                    <td><img src="@result.Hero.ImageUrl"></td>
                    <td>@result.WinRate %</td>
                </tr>
            }
        </table>
    </div>
</div>
    }
}



@code
{
    Rank Rank = Rank.None;
    string HeroToPick;

    string Map
    {
        get => _Map;
        set
        {
            _Map = value;
            UpdateBestMapPicks();
        }
    }

    string _Map;

    Map[] Maps = new Map[0];
    Hero[] Heroes = new Hero[0];
    DraftAdvice Advice;
    IEnumerable<HeroWinrate> Matchups = Array.Empty<HeroWinrate>();
    List<Hero> AvailableHeroes = new List<Hero>();

    Hero[][] Teams = new Hero[][]
    {
        new Hero[5],
        new Hero[5]
    };

    Hero[] Bans = new Hero[6];

    protected override async Task OnInitializedAsync()
    {
        Heroes = await Http.GetFromJsonAsync<Hero[]>("Static/Heroes");
        Maps = await Http.GetFromJsonAsync<Map[]>("Static/Maps");

        Maps = Maps.OrderBy(i => i.Name).ToArray();
        AvailableHeroes = Heroes.Select(i => i).ToList();
    }

    private void BanHero()
    {
        int idx = Array.IndexOf(Bans, null);
        Hero hero = AvailableHeroes.FirstOrDefault(i => i.Name == HeroToPick);

        AvailableHeroes.Remove(hero);
        Bans[idx] = hero;
        HeroToPick = "";
        UpdateBestMapPicks();
    }

    private void PickHero(int team)
    {
        int idx = Array.IndexOf(Teams[team], null);
        Hero hero = AvailableHeroes.FirstOrDefault(i => i.Name == HeroToPick);

        AvailableHeroes.Remove(hero);
        Teams[team][idx] = hero;
        HeroToPick = "";
        UpdateBestMapPicks();
    }

    private string GenerateTeamString(int id)
    {
        Hero[] heroes = Bans;

        if (id < 2)
            heroes = Teams[id];

        string str = heroes.Where(i => i != null).Aggregate("", (s, hero) => s + hero.Name + ";");

        if (str == "")
            str = ";";

        return (str);
    }

    private async void UpdateBestMapPicks()
    {
        Advice = await Http.GetFromJsonAsync<DraftAdvice>($@"Pick/Advise/{Map}/{Rank}/{GenerateTeamString(0)}/{GenerateTeamString(1)}/{GenerateTeamString(2)}");
        
        InvokeAsync(StateHasChanged);
    }

    private async void UpdateMatchups(string hero, int team)
    {
        Matchups = await Http.GetFromJsonAsync<IEnumerable<HeroWinrate>>($"Pick/Matchups/{Rank}/{hero}/{GenerateTeamString(team)}");

        InvokeAsync(StateHasChanged);
    }
}
